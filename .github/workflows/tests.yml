name: Run unit and integration tests

on:
  # NOTE: github.event context is push payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'

  # NOTE: github.event context is pull_request payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:
    types:
      - opened
      - reopened
      - synchronize


jobs:
  linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8']
        conda-version: [release]
        test-type: [serial, parallel]
        include:
          - os: ubuntu-latest
            python-version: '3.9'
            conda-version: canary
            test-type: serial
          - os: ubuntu-latest
            python-version: '3.9'
            conda-version: canary
            test-type: parallel
    env:
      pytest-replay: --replay-record-dir=pytest-replay/ --replay-base-name=Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file:  ci/github/.condarc
          python-version: ${{ matrix.python-version }}

      - name: Install Conda-Canary if canary version
        if: matrix.conda-version == 'canary'
        run: |
          conda install -y -c conda-canary conda

      - name: Install default Conda if release version
        if: matrix.conda-version == 'release'
        run: |
          conda install -y conda

      - name: Source Scripts
        run: |
          source ci/azurepipelines/install_conda_build_test_deps
          pip install -e .
          conda info -a
          mkdir ./pytest-replay

      - name: Run Serial tests
        if: matrix.test-type == 'serial'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n 0 \
              --basetemp /tmp/cb_serial \
              --cov conda_build \
              --cov-report xml \
              -m "serial" tests \
              --test-run-title="Linux-SerialTests" \
              --test-run-title="Linux-SerialTests-${{ matrix.conda-version }}-Py${{ matrix.python-version }}" \
              ${{ env.pytest-replay }}

      - name: Run Parallel tests
        if: matrix.test-type == 'parallel'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n auto \
              --basetemp /tmp/cb \
              --cov conda_build \
              --cov-append \
              --cov-report xml \
              -m "not serial" tests \
              --test-run-title="Linux-ParallelTests" \
              --test-run-title="Linux-ParallelTests-${{ matrix.conda-version }}-Py${{ matrix.python-version }}" \
              ${{ env.pytest-replay }}

      - name: Upload Pytest Replay
        uses: actions/upload-artifact@v2
        with:
          name: Linux_replay-py-${{ matrix.python-version }}_${{ matrix.conda-version }}_${{ matrix.test-type }}
          path: pytest-replay/


  windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.7', '3.8' ]
        conda-version: [ release ]
        test-type: [ serial, parallel ]
        include:
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
    env:
      pytest-replay: --replay-record-dir=pytest-replay/ --replay-base-name=Windows-${{ matrix.conda-version }}-Py${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set temp dirs correctly
        shell: bash -l {0}
        # https://github.com/actions/virtual-environments/issues/712
        run: |
          echo "TMPDIR=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TEMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ci/github/.condarc
          python-version: ${{ matrix.python-version }}

      - name: Install Conda-Canary if canary version
        shell: bash -l {0}
        if: matrix.conda-version == 'canary'
        run: |
          conda install -y -c conda-canary conda

      - name: Install default Conda if release version
        shell: bash -l {0}
        if: matrix.conda-version == 'release'
        run: |
          conda install -y conda

      - name: Source Scripts
        shell: cmd
        run: |
          python -c "import sys; print(sys.version)"
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.prefix)"
          call conda update -q --all||exit 1
          call conda install -q pip python-libarchive-c pytest git pytest-cov jinja2 m2-patch flake8 mock requests contextlib2 chardet glob2 perl pyflakes pycrypto posix m2-git anaconda-client numpy beautifulsoup4 pytest-xdist pytest-mock filelock pkginfo psutil pytz tqdm conda-package-handling pytest-azurepipelines||exit 1
          call conda install pytest-replay pytest-rerunfailures -y||exit 1
          pip install --no-deps .
          conda-build --version
          pushd .. && git clone https://github.com/conda/conda_build_test_recipe && popd
          mkdir %UserProfile%\cbtmp_serial
          mkdir %UserProfile%\cbtmp
          for /d %%F in (%UserProfile%\cbtmp_serial\*) do rd /s /q "%%F"
          for /d %%F in (%UserProfile%\cbtmp\*) do rd /s /q "%%F"
          call conda create -n blarg -yq --download-only python=2.7||exit 1
          call conda create -n blarg -yq --download-only python=3.8||exit 1
          call conda create -n blarg -yq --download-only python cmake||exit 1
          mkdir $(Build.ArtifactStagingDirectory)\\pytest-replay
          set "PYTEST_REPLAY_OPTIONS=--replay-record-dir=$(Build.ArtifactStagingDirectory)\\pytest-replay --replay-base-name=Win-%CONDA_VERSION%-Py%PYTHON_VERSION%"
          echo "##vso[task.setvariable variable=PYTEST_REPLAY_OPTIONS]%PYTEST_REPLAY_OPTIONS%"

      - name: Run Serial tests
        shell: cmd
        if: matrix.test-type == 'serial'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n 0 \
              --basetemp %UserProfile%\cbtmp_serial \
              --cov conda_build \
              --cov-report xml \
              -m "serial" tests \
              --test-run-title="Windows-SerialTests" \
              --test-run-title="Windows-SerialTests-${{ matrix.conda-version }}-Py${{ matrix.python-version }}" \
              ${{ env.pytest-replay }}

      - name: Run Parallel tests
        shell: bash -l {0}
        if: matrix.test-type == 'parallel'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n auto \
              --basetemp %UserProfile%\cbtmp \
              --cov conda_build \
              --cov-append \
              --cov-report xml \
              -m "not serial" tests \
              --test-run-title="Windows-ParallelTests" \
              --test-run-title="Windows-ParallelTests-${{ matrix.conda-version }}-Py${{ matrix.python-version }}" \
              ${{ env.pytest-replay }}

      - name: Upload Pytest Replay
        uses: actions/upload-artifact@v2
        with:
          name: Windows_replay-py-${{ matrix.python-version }}_${{ matrix.conda-version }}_${{ matrix.test-type }}
          path: pytest-replay/
